#!/bin/sh
#
# testExecutable test Harness Runner
#
#   Runs a single program putting the standard output in the file "out.txt"
#   
#     Files Used:
#          program_setup.sh    shell variable file that sets up the test problem
#
#     Environmental Variables Used (set up within program_setup.sh:
#           TEST_NAME = name of the test that is used downstream
#
#           PROGRAM = Name of the executable to be run (there is one executable that is run
#              
#
#           Text list of file to be checked using the diff command:
#             BLESSED_DATA_FILES='good_out.txt good_out2.txt'  
#             DATA_FILES='out.txt  out2.txt'
#             DIFF_NAMES='diff.txt diff_2.txt'
#             DIFF_REQ='True True'
#
#                    If the standard output is to be checked then include out.txt in the DATA_FILES list.
#
#           csv file to be checked using the diff command:
#             BLESSED_CSV_FILES='table_blessed.csv table_2_blessed.csv'
#             CSV_FILES='out.txt  out2.txt
#             DIFF_CSV_NAMES='diff.txt diff_2.txt'
#             DIFF_CSV_REQ='True True'
#
# todo: add a VERBOSE option to turn off output when not needed
#
################################################################################################################################
#
function cleanup {
  if test -e runInProgress.txt
  then
    /bin/rm -f runInProgress.txt
    echo "  Run Interrupted: " `date` > runBad
    /bin/rm -f runGood
  fi
  exit 0
}
#
DIFF_REQUIRED="True"
#
################################################################################################################################
#  chop_head: Remove the 1st element of a string
#
chop_head() {
    shift
    echo "$@"
}
#
################################################################################################################################
# first_el: Echo the 1st element of a string
#
first_el() {
    echo "$1"
}
#
################################################################################################################################
# diff_compare_file arg1 arg2  
#       Compare two files using the standard diff operator
#       Returns the retnState of the diff operator
#       Sets the variable retnState_cum if there is a failure.
#       Sets the file flag runBadd if there is a failure
#
#   arg 1 = blessed file
#   arg 2 = created text file to be compared to the blessed file
#
diff_compare_file() {

   bb=$1
   gg=$2

   difname=''
   filename=''
   diff_comparison_file="diff_summary.txt"

   if test $# -ge 3
   then
      difname=$3
   else
      filename="${gg%.*}"
      difname=diff_"$filename".txt
   fi
   diffCode='0'

   diff $bb $gg >> $difname
   retnStat=$?
   if test $retnStat = "0"
   then
        echo "     * PASSED: diff comparison ($bb vs. $gg)"
        echo "     * PASSED: diff comparison ($bb vs. $gg)" >> $diff_comparison_file
    else
        echo "     * FAILED: diff comparison ($bb vs. $gg)"
        echo "     * FAILED: diff comparison ($bb vs. $gg)" >> $diff_comparison_file
        diffCode='FAILED'
        if test $DIFF_REQUIRED = "True"
        then
          echo "  Bad dataFile: " `date` > runBad
          /bin/rm -f runGood
          retnStat_cum=$retnStat
        else
            echo "     *       : However not required for test success"
            echo "     *       : However not required for test success" >> $diff_comparison_file
            retnStat="0"
        fi
    fi
    unset bb
    unset gg
    unset difname
    unset filename
    return $retnStat
}
#
################################################################################################################################
#
#   arg 1 = blessed file
#   arg 2 = 
#
csvdiff_compare_file() {

   bb=$1
   gg=$2

   difname=''
   filename=''
   diff_comparison_file="diff_summary.txt"

   if test $# -ge 3
   then
      difname=$3
   else
      filename="${gg%.*}"
      difname=diff_"$filename".txt
   fi
   d

   csvdiff $bb $gg >> $difname
   retnStat=$?
   if test $retnStat = "0"
   then
        echo "     * PASSED: csvdiff comparison ($bb vs. $gg)"
        echo "     * PASSED: csvdiff comparison ($bb vs. $gg)" >> $diff_comparison_file
    else
        echo "     * FAILED: csvdiff comparison ($bb vs. $gg)"
        echo "     * FAILED: csvdiff comparison ($bb vs. $gg)" >> $diff_comparison_file
        diffCode='FAILED'
        if test $DIFF_REQUIRED = "True"
        then
          echo "  Bad dataFile: " `date` > runBad
          /bin/rm -f runGood
          retnStat_cum=$retnStat
        else
            echo "     *       : However not required for test success"
            echo "     *       : However not required for test success" >> $diff_comparison_file
            retnStat="0"
        fi
    fi
    unset bb
    unset gg
    unset difname
    unset filename

    return $retnStat

}
#
#
################################################################################################################################
############################################# MAIN PROGRAM #####################################################################
################################################################################################################################
#
#
fff='0'
PROGRAM_SETUP='problem_setup.sh'

while getopts "fhi:" opt; do
  case $opt in
    f  ) fff='1' ;;
    h  ) echo 'usage runtestExec [-f] [-h] [-i program_setup.sh] [ $PROGRAM_EXTRA_OPTS ] '
         exit 1 ;;
    i  )  echo 'input file changed to ' $OPTARG
         PROGRAM_SETUP=$OPTARG
         ;;
    \? ) echo 'usage runtestExec [-f] [-h] [-i program_setup.sh] [ $PROGRAM_EXTRA_OPTS ]'
         exit 1 ;;
  esac
done
shift $(($OPTIND - 1))
#
#
PROGRAM_EXTRA_OPTS=
if test $# -ge 1
then
   //echo 'more than one ' $# ' '  $0 ' ' $1 ' '  $? '  ' $@
   PROGRAM_EXTRA_OPTS=$@
   shift
fi
#
# Test name is the name of the current directory
#
if test "$TEST_NAME" = ""
then
  ff=`pwd`
  TEST_NAME=`basename $ff`
fi
#
#
#############################################################################################################################
#
#  Check the file flag to see if a run is in progress
#
if test -f runInProgress.txt
then
  if test $fff == '0'
  then
    echo 'Runner ' $$ ': Test skipped due to runInProgress.txt flag: ' `pwd`
    echo '               Remove the flag file if you want to run the test'
    exit 0
  fi
fi
echo $$ > runInProgress.txt
#
#  trap interrupt and signals. 
#
trap cleanup INT TERM TSTP QUIT
#
#############################################################################################################################
#
if test ! -x $PROGRAM_SETUP   ; then
    echo 'ERROR:  ' $PROGRAM_SETUP ' setup file can not be found'
    /bin/rm -f runInProgress.txt
    exit -1
fi
. ./$PROGRAM_SETUP
#
#############################################################################################################################
#
#  Remove temporary files
#
Files=" out_raw.txt out.txt outa.txt err_out.txt diff_xml.txt  diff_out.txt \
            solution.xml diff_b*.txt diff_s*.txt diff_s3.txt diff_IV.txt \
            runGood runBad diff_summary.txt"
readCleanFiles=$EXTRA_WHACKED_FILES
Files+=`echo "$readCleanFiles"`
#  echo 'Files to be whacked: ' $Files
/bin/rm  -f  $Files
#
#############################################################################################################################
#
# Create a symbolic link to the executable, if none exists already
#
# echo 'program = ' $PROGRAM
if test ! -x $PROGRAM   ; then
  if test -x ${CANTERA_APPS_INSTALL_BINDIR}/${PROGRAM} ; then
    ln -s ${CANTERA_APPS_INSTALL_BINDIR}/${PROGRAM} .
  else
    echo 'ERROR:  ' $PROGRAM ' executable can not be found'
    /bin/rm -f runInProgress.txt
    exit -1
  fi
fi
#
##############################################################################################################################
#
#   Run the program and check exit status
#
export ELECTRODE_TURN_OFF_PC_PRINTING=true
#
if test ! -z $PROGRAM_STD_INPUT
then
  $PROGRAM $PROGRAM_EXTRA_OPTS < $PROGRAM_STD_INPUT > out.txt 2>err_out.txt
  retnStat_run=$?
else
  $PROGRAM $PROGRAM_EXTRA_OPTS  > out.txt 2>err_out.txt
  retnStat_run=$?
fi
#
#
#
if test $retnStat_run != "0" 
then
  temp_success="0"
#
#    Some tests indicate failure solely by setting a bad return flag
#    This is true of gtests tests. Therefore, this is a normal exit point
#    for these tests.
#
  echo "    $PROGRAM returned with bad status, $retnStat_run, check output"
  echo "Unsuccessful test comparison of \"$TEST_NAME\" in dir, "`pwd`
  echo "  Test Failed: " `date` > runBad
  /bin/rm -f runGood
  /bin/rm -f runInProgress.txt
  exit 0
fi
# 
############################################################################################################################
#
# Run the csv diff programs to see if the calculation passes
#
retnStat_cum="0"

for b in $BLESSED_CSV_FILES
do
    g=`first_el $CSV_FILES`
    n=`first_el $DIFF_CSV_NAMES`
    r=`first_el $DIFF_CSV_REQ`
    DIFF_REQUIRED="True"
    if [ $r = "True" ]
    then
       DIFF_REQUIRED="True"
    elif  [ $r = "False" ]
    then
        DIFF_REQUIRED="False"
    else
        echo "Unknown DIFF_REQ field: must be True or False:" '"'$r'"'
        /bin/rm runInProgress.txt
        exit -1
    fi
    csv_compare_file $b $g $n

    CSV_FILES=`chop_head $DATA_FILES`
    DIFF_CSV_NAMES=`chop_head $DIFF_NAMES`
    DIFF_CSV_REQ=`chop_head $DIFF_REQ`
done
#
############################################################################################################################
#
# Run the ascii diff programs to see if the calculation passes
#
for b in $BLESSED_DATA_FILES
do
    g=`first_el $DATA_FILES`
    n=`first_el $DIFF_NAMES`
    r=`first_el $DIFF_REQ`
    DIFF_REQUIRED="True"
    if [ $r = "True" ]
    then
       DIFF_REQUIRED="True"
    elif  [ $r = "False" ]
    then
        DIFF_REQUIRED="False"
    else
        echo "Unknown DIFF_REQ field: must be True or False:" '"'$r'"'
        /bin/rm runInProgress.txt
        exit -1
    fi
    diff_compare_file $b $g $n

    DATA_FILES=`chop_head $DATA_FILES`
    DIFF_NAMES=`chop_head $DIFF_NAMES`
    DIFF_REQ=`chop_head $DIFF_REQ`
done
# 
############################################################################################################################
#
# Determine the overall success of the run
#
eCode=$retnStat_run_
if test $retnStat_run = "0"
then
   eCode=$retnStat_cum
fi

if [ $eCode == "0" ]
then
  echo "Successful   test comparison of \"$TEST_NAME\" in dir, "`pwd`
  echo "  Test Passed: " `date` > runGood
  /bin/rm -f runBad
else
  echo "Unsuccessful test comparison of \"$TEST_NAME\" in dir, "`pwd`
  echo "  Test Failed: " `date` > runBad
  /bin/rm -f runGood
fi
#
#  Release the semiphore
#
/bin/rm runInProgress.txt
#
# return 0 for no errors, 1 for errors which break the test suite
#
exit 0
