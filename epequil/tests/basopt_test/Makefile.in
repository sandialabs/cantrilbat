#!/bin/sh

############################################################################
#
#  Makefile to compile and link a C++ application to 
#  Cantera.
#
#############################################################################

# addition to suffixes
.SUFFIXES : .d

# the name of the executable program to be created
PROG_NAME = basopt_gri

TESTNAME = $(PROG_NAME)

BLESSED_FILES = output_blessed.txt

DATA =  problem_setup.sh gri30.xml

TEST_FLAGS = runGood runBad runInProgress.txt

TEST_INTERMEDIATES = err_out.txt diff_out.txt diff_summary.txt diff_out.txt

TEST_RESULTS = output.txt

# the object files to be linked together. List those generated from Fortran
# and from C/C++ separately
OBJS = basopt_gri.o

# This link is to Cantera's install space
CT_INCROOT=@ct_incroot@

# Bring in the Zuzax includes through the .mak file
include $(CT_INCROOT)/zuzax/Zuzax.mak

# Top of the directory structure for git module
TOPDIR = @abs_top_srcdir@

# Define the include directories
INCLUDE_DIRS =  $(ZUZAX_TOTAL_INCLUDES)

# the C++ compiler
CXX = @CXX@

CXX_FLAGS = @CXXFLAGS@ -DDEBUG_HKM $(INCLUDE_DIRS)

# Ending C++ linking libraries
LCXX_END_LIBS = @LCXX_END_LIBS@

# flags passed to the C++ compiler/linker for the linking step
LCXX_FLAGS = @CXXFLAGS@

# How to compile C++ source files to object files
.cpp.o:
	$(CXX) -c $< $(CXX_FLAGS)

# How to compile the dependency file
.cpp.d:
	@CXX_DEPENDS@  $(CXX_FLAGS) $*.cpp > $*.d

# List of dependency files to be created
DEPENDS=$(OBJS:.o=.d)

# Program Name
PROGRAM = $(PROG_NAME)$(EXE_EXT)

all: $(PROGRAM) .dependsT

$(PROGRAM): $(OBJS) $(ZUZAX_CORE_LIBS_DEP)
	$(CXX) -o $(PROGRAM) $(OBJS) $(LCXX_FLAGS) $(LINK_OPTIONS) \
	          $(ZUZAX_TOTAL_LIBS) \
	          $(LCXX_END_LIBS)

basopt_red1: basopt_red1.o  $(ZUZAX_CORE_LIBS_DEP)
	$(CXX) -o basopt_red1 basopt_red1.o $(LCXX_FLAGS) $(LINK_OPTIONS) \
	          $(ZUZAX_TOTAL_LIBS) \
	          $(LCXX_END_LIBS)

$(OBJS): Makefile

$(DEPENDS): Makefile

# depends target -> forces recalculation of dependencies
depends:
	$(RM) *.d .depends
	@MAKE@ .dependsT

.dependsT: $(DEPENDS)
	cat *.d > .depends
	touch .dependsT

test: 
	@gmake -s
	@echo -n 'Checking need to run test ' $(TESTNAME) ': '
	@gmake -q -s  runGood ; ss=$$? ; if test $$ss = "0" ; then echo '   NOT NEEDED' ; else  gmake -s runGood ; fi

runGood: $(PROGRAM) $(DATA) Makefile $(BLESSED_FILES)
	@echo 'RUNNING TEST ' $(TESTNAME)
	$(TOPDIR)/bin/runtest_Exec

rebaseline:
	cp output.txt output_blessed.txt

clean:
	$(RM) $(TEST_FLAGS) $(OBJS) $(PROGRAM) $(DEPENDS) .depends .dependsT

clean_test:
	$(RM) $(TEST_FLAGS) $(TEST_INTERMEDIATES) $(TEST_RESULTS)

clean_dist: 
	$(RM) $(TEST_FLAGS) $(OBJS) $(PROGRAM) $(DEPENDS) .depends .dependsT
	$(RM) $(TEST_FLAGS) $(TEST_INTERMEDIATES) $(TEST_RESULTS)

clean_test_flags: 
	$(RM) $(TEST_FLAGS)


ifeq ($(wildcard .depends), .depends)
include .depends
endif

