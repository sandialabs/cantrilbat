#!/bin/sh
############################################################################
#
#  Makefile to compile, link, and test  a C++ application to Zuzax
#
#############################################################################

# addition to suffixes
.SUFFIXES : .d

# the name of the executable program to be created
PROG_NAME = jp8_matrix

TESTNAME = $(PROG_NAME)

BLESSED_FILES = output_blessed.txt

DATA = jp8_mech_hongzhi.xml problem_setup.sh

TEST_FLAGS = runGood runBad runInProgress.txt

TEST_INTERMEDIATES = err_out.txt diff_out.txt diff_summary.txt diff_out.txt err_out.txt

TEST_RESULTS = out.txt

# List of objects to be linked
OBJS = $(PROG_NAME).o

# This link is to Cantera's install space
CT_INCROOT=@ct_incroot@

# Bring in the Cantera includes through the .mak file
include $(CT_INCROOT)/cantera/Cantera.mak

# Top of the directory structure for git module
TOPDIR = @abs_top_srcdir@

# Define the include directories
INCLUDE_DIRS = $(CANTERA_TOTAL_INCLUDES)

# the C++ compiler
CXX = @CXX@

CXX_FLAGS = @CXXFLAGS@ $(INCLUDE_DIRS)

# Ending C++ linking libraries
LCXX_END_LIBS = @LCXX_END_LIBS@

# flags passed to the C++ compiler/linker for the linking step
LCXX_FLAGS = @CXXFLAGS@

# How to compile C++ source files to object files
.cpp.o:
	$(CXX) -c $< $(CXX_FLAGS)

# How to compile the dependency file
.cpp.d:
	@CXX_DEPENDS@ $(CXX_FLAGS) $*.cpp > $*.d

# List of dependency files to be created
DEPENDS=$(OBJS:.o=.d)

# Program Name
PROGRAM = $(PROG_NAME)$(EXE_EXT)

all: $(PROGRAM) .dependsT

$(PROGRAM): $(OBJS) $(CANTERA_CORE_LIBS_DEP)
	$(CXX) -o $(PROGRAM) $(OBJS) $(LCXX_FLAGS)  \
                  $(CANTERA_TOTAL_LIBS)  \
                  $(LCXX_END_LIBS)

$(OBJS): Makefile

$(DEPENDS): Makefile

# depends target -> forces recalculation of dependencies
depends:
	$(RM) *.d .dependsT
	@MAKE@ .dependsT

.dependsT: $(DEPENDS)
	cat *.d > .depends
	touch .dependsT

test: 
	@gmake -s
	@echo -n 'Checking need to run test ' $(TESTNAME) ': '
	@gmake -q -s  runGood ; ss=$$? ; if test $$ss = "0" ; then echo '   NOT NEEDED' ; else  gmake -s runGood ; fi

runGood: $(PROGRAM) $(DATA) Makefile $(BLESSED_FILES)
	@echo 'RUNNING TEST ' $(TESTNAME)
	$(TOPDIR)/bin/runtest_Exec

rebaseline:
	cp out.txt output_blessed.txt

clean:
	$(RM) $(TEST_FLAGS) $(OBJS) $(PROGRAM) $(TEST_INTERMEDIATES) $(DEPENDS) .depends .dependsT

clean_test:
	$(RM) $(TEST_FLAGS) $(TEST_INTERMEDIATES) $(TEST_RESULTS)

clean_dist: 
	$(RM) $(TEST_FLAGS) $(OBJS) $(PROGRAM) $(DEPENDS) .depends .dependsT
	$(RM) $(TEST_FLAGS) $(TEST_INTERMEDIATES) $(TEST_RESULTS)

clean_test_flags: 
	$(RM) $(TEST_FLAGS)

#############################################################################
#          DEPENDS RULES
##############################################################################

ifeq ($(wildcard .depends), .depends)
include .depends
endif

