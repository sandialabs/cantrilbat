#!/bin/sh

# addition to suffixes
.SUFFIXES : .d

# the name of the executable program to be created
PROG_NAME = gri_equil
TESTNAME=$(PROG_NAME)

BLESSED_FILES = good_out.txt vcs_equilibrate_blessed.csv
BLESSED_DEBUG_FILES = good_dout.txt vcs_equilibrate_blessed.csv

DATA =  problem_setup.sh problem_setup_d.sh gri30.xml

TOPDIR = @abs_top_srcdir@

# the object files to be linked together. List those generated from Fortran
# and from C/C++ separately
OBJS = gri_equil.o

# Check to see whether we are in the msvc++ environment
os_is_win = @OS_IS_WIN@

# the C++ compiler
CXX = @CXX@

# The directory where Zuzax include files may be found.
CT_INCROOT=@ct_incroot@

# Bring in the Zuzax includes through the .mak file
include $(CT_INCROOT)/zuzax/Zuzax.mak

INCLUDE_DIRS = $(ZUZAX_TOTAL_INCLUDES)

# C++ compile flags
CXX_FLAGS = @CXXFLAGS@ $(INCLUDE_DIRS)

# Ending C++ linking libraries
LCXX_END_LIBS = @LCXX_END_LIBS@

# flags passed to the C++ compiler/linker for the linking step
LCXX_FLAGS = @CXXFLAGS@

# How to compile C++ source files to object files
.cpp.o:
	$(CXX) $(CXX_FLAGS) -c $< 

# How to compile the dependency file
.cpp.d:
	@CXX_DEPENDS@  $(CXX_FLAGS) $*.cpp > $*.d

# List of dependency files to be created
DEPENDS=$(OBJS:.o=.d)

# Program Name
PROGRAM = $(PROG_NAME)$(EXE_EXT)

all: $(PROGRAM) .depends

$(PROGRAM): $(OBJS)  $(ZUZAX_CORE_LIBS_DEP)
	$(CXX) -o $(PROGRAM) $(OBJS) $(LCXX_FLAGS) $(LINK_OPTIONS) \
                  $(ZUZAX_TOTAL_LIBS) \
                  $(LCXX_END_LIBS)


$(OBJS): Makefile

$(DEPENDS): Makefile


# depends target -> forces recalculation of dependencies
depends:
	$(RM) *.d .depends
	$(MAKE) .depends

.depends: $(DEPENDS)
	cat *.d > .depends

test: 
	@$(MAKE) -s
	@echo -n 'Checking need to run test ' $(TESTNAME) ': '
	@$(MAKE) -q -s  runGood ; ss=$$? ; if test $$ss = "0" ; then echo '   NOT NEEDED' ; else  $(MAKE) -s runGood ; fi

testd: 
	@$(MAKE) -s
	@echo -n 'Checking need to run test ' $(TESTNAME)"_debug" ': '
	@$(MAKE) -q -s  runGood_debug ; ss=$$? ; if test $$ss = "0" ; then echo '   NOT NEEDED' ; else  $(MAKE) -s runGood_debug ; fi

runGood: $(BASE_PROGRAM) $(PROGRAM) $(DATA) Makefile $(BLESSED_FILES)
	 @echo 'RUNNING TEST ' $(TESTNAME)
	/bin/rm -f runGood_release
	$(TOPDIR)/bin/runtest_Exec

runGood_debug: $(BASE_PROGRAM) $(PROGRAM) $(DATA) Makefile $(BLESSED_DEBUG_FILES)
	if test -e "runGood" ; then cp runGood runGood_release ; fi
	@echo 'RUNNING TEST ' $(TESTNAME)"_debug"
	$(TOPDIR)/bin/runtest_Exec -i problem_setup_d.sh
	if test -e "runGood" ; then cp runGood runGood_debug ; fi
	if test -e "runGood_release" ; then mv runGood_release runGood ; fi

rebaseline:
	if test -e out.txt ; then cp out.txt good_out.txt ; fi
	cp vcs_equilibrate_res.csv vcs_equilibrate_blessed.csv
	if test -e dout.txt ; then cp dout.txt good_dout.txt ; fi


clean:
	$(RM) $(OBJS) $(PROGRAM) $(DEPENDS) .depends diff.out out.txt \
               diff_csv.txt diff_out.txt err_out.txt vcs_equilibrate_res.csv \
               dout.txt err_dout.txt


ifeq ($(wildcard .depends), .depends)
include .depends
endif

