#!/bin/sh

############################################################################
#
#  Makefile to compile and link a C++ application to 
#  Cantera.
#
#############################################################################

# addition to suffixes
.SUFFIXES : .d

# the name of the executable program to be created
PROG_NAME = CO2_solubility
TESTNAME = $(PROG_NAME)

# the object files to be linked together. List those generated from Fortran
# and from C/C++ separately
OBJS = CO2_solubility.o CO2_solubility_1.o

BLESSED_FILES = good_out.txt vcs_equilibrate_blessed.csv
BLESSED_DEBUG_FILES = good_dout.txt vcs_equilibrate_blessed.csv

DATA =  problem_setup.sh problem_setup_d.sh \
        gas.xml  HMW_BrineDatabase_CO2.xml  NaCl_Solid.xml

TEST_FLAGS = runGood runBad runInProgress.txt runGood_debug

TEST_INTERMEDIATES = diff_summary.txt diff_out.txt diff_dout.txt err_dout.txt err_out.txt out.txt dout.txt 

TOPDIR = @abs_top_srcdir@

# Location of the current build. Will assume that tests are run
# in the source directory tree location
src_dir_tree = 0

# additional flags to be passed to the linker. If your program
# requires other external libraries, put them here
LINK_OPTIONS = 

#############################################################################

# Check to see whether we are in the msvc++ environment
os_is_win = @OS_IS_WIN@

# the C++ compiler
CXX = @CXX@

#
# These links are to Cantera's install space
CT_INCROOT =  @ct_incroot@

#
# Bring in the Zuzax includes through the .mak file
#
include $(CT_INCROOT)/zuzax/Zuzax.mak

#
# Utility src directory
#
UTILSRC_DIR=../../util_src/src
UTILSRC_DEP = $(UTILSRC_DIR)/libutil_src.a
UTILSRC     = -L$(UTILSRC_DIR) -lutil_src

# Set up the global include directory macro
#
INCLUDE_DIRS = $(ZUZAX_TOTAL_INCLUDES)

# C++ compile flags
CXX_FLAGS = @CXXFLAGS@ $(INCLUDE_DIRS) -DUSE_VCSNONIDEAL

# Ending C++ linking libraries
LCXX_END_LIBS = @LCXX_END_LIBS@

# the directory where the Zuzax libraries are located
ZUZAX_LIBDIR=@ct_libdir@

#
# Setup The Zuzax Interface
#
ZUZAX_LIBDIR=@ct_libdir@



ifeq (@build_lapack@, 1)
ZUZAX_LAPACK_DEPS = $(ZUZAX_LIBDIR)/libctblas.a  $(ZUZAX_LIBDIR)/libctlapack.a
endif


# flags passed to the C++ compiler/linker for the linking step
LCXX_FLAGS = -L$(ZUZAX_LIBDIR)  @CXXFLAGS@

# How to compile C++ source files to object files
.cpp.o:
	$(CXX) $(CXX_FLAGS) -c $< 

# How to compile the dependency file
.cpp.d:
	@CXX_DEPENDS@ $(CXX_FLAGS) $*.cpp > $*.d

# List of dependency files to be created
DEPENDS=$(OBJS:.o=.d)

# Program Name
PROGRAM = $(PROG_NAME)$(EXE_EXT)

all: $(PROGRAM) CO2_solubility_1 .dependsT

$(PROGRAM): CO2_solubility.o $(ZUZAX_CORE_LIBS_DEP)
	$(CXX) -o $(PROGRAM) CO2_solubility.o $(LCXX_FLAGS) $(LINK_OPTIONS) \
                 $(ZUZAX_TOTAL_LIBS)     \
                  $(LCXX_END_LIBS)

CO2_solubility_1: CO2_solubility_1.o $(ZUZAX_CORE_LIBS_DEP)
	$(CXX) -o CO2_solubility_1 CO2_solubility_1.o $(LCXX_FLAGS) $(LINK_OPTIONS) \
                 $(ZUZAX_TOTAL_LIBS)     \
                  $(LCXX_END_LIBS)

$(OBJS): Makefile

# depends target -> forces recalculation of dependencies
depends:
	$(RM) *.d .depends
	$(MAKE) .dependsT

.dependsT: $(DEPENDS)
	cat *.d > .depends
	touch .dependsT

test: 
	@$(MAKE) -s
	@echo -n 'Checking need to run test ' $(TESTNAME) ': '
	@$(MAKE) -q -s  runGood ; ss=$$? ; if test $$ss = "0" ; then echo '   NOT NEEDED' ; else  $(MAKE) -s runGood ; fi

testd: 
	@$(MAKE) -s
	@echo -n 'Checking need to run test ' $(TESTNAME)"_debug" ': '
	@$(MAKE) -q -s  runGood_debug ; ss=$$? ; if test $$ss = "0" ; then echo '   NOT NEEDED' ; else  $(MAKE) -s runGood_debug ; fi


runGood: $(BASE_PROGRAM) $(PROGRAM) $(DATA) Makefile $(BLESSED_FILES)
	 @echo 'RUNNING TEST ' $(TESTNAME)
	/bin/rm -f runGood_release
	$(TOPDIR)/bin/runtest_Exec

runGood_debug: $(BASE_PROGRAM) $(PROGRAM) $(DATA) Makefile $(BLESSED_DEBUG_FILES)
	if test -e "runGood" ; then cp runGood runGood_release ; fi
	@echo 'RUNNING TEST ' $(TESTNAME)"_debug"
	$(TOPDIR)/bin/runtest_Exec -i problem_setup_d.sh
	if test -e "runGood" ; then cp runGood runGood_debug ; fi
	if test -e "runGood_release" ; then mv runGood_release runGood ; fi

rebaseline:
	if test -e out.txt ; then cp out.txt good_out.txt ; fi
	cp vcs_equilibrate_res.csv vcs_equilibrate_blessed.csv
	cp vcs_equilibrate_res_1.csv  vcs_equilibrate_blessed_1.csv
	cp vcs_equilibrate_res_2.csv  vcs_equilibrate_blessed_2.csv
	cp vcs_equilibrate_res_3.csv  vcs_equilibrate_blessed_3.csv
	cp vcs_equilibrate_res_4.csv  vcs_equilibrate_blessed_4.csv
	if test -e dout.txt ; then cp dout.txt good_dout.txt ; fi

clean:
	$(RM) $(OBJS) $(PROGRAM) $(DEPENDS) .depends .dependsT vcs_equilibrate_res*csv diff_csv* \
	      $(TEST_FLAGS) $(TEST_INTERMEDIATES)

#############################################################################
#	  INSTALL RULES
##############################################################################

ifeq ($(wildcard .depends), .depends)
include .depends
endif

