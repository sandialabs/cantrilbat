#!/bin/sh

############################################################################
#
#  Makefile to compile and link a C++ application to 
#  Cantera.
#
#############################################################################

# addition to suffixes
.SUFFIXES : .d

# the name of the executable program to be created

# the object files to be linked together. List those generated from Fortran
# and from C/C++ separately
M1D_OBJS =  m1d_Comm.o md_wrap_mpi.o m1d_EpetraExtras.o\
        m1d_exception.o  m1d_app.o m1d_globals.o m1d_LocalNodeIndices.o \
        m1d_GlobalIndices.o m1d_NodalVars.o m1d_DomainDescription.o \
        m1d_BulkDomainDescription.o  m1d_SurfDomainDescription.o \
        m1d_DomainLayout.o m1d_VBRIndices.o m1d_BulkDomain1D.o \
        m1d_SimpleDiff_dom1D.o m1d_Domain1D.o \
        m1d_SurDomain1D.o m1d_SurfDomainTypes.o m1d_BulkDomainTypes.o \
        m1d_EqnVarTypes.o m1d_ProblemResidEval.o m1d_solvers.o m1d_EpetraJac.o \
        m1d_SolGlobalNonlinear.o m1d_SolNonlinear.o m1d_SimpleTDDiff_dom1D.o m1d_ProblemStatement.o \
        m1d_RecordTree_base.o m1d_BoundaryCondition.o

M1D_HDRS =  m1d_Comm.h md_wrap_mpi.h m1d_EpetraExtras.h\
        m1d_exception.h  m1d_app.h m1d_globals.h m1d_LocalNodeIndices.h \
        m1d_GlobalIndices.h m1d_NodalVars.h m1d_DomainDescription.h \
        m1d_BulkDomainDescription.h  m1d_SurfDomainDescription.h \
        m1d_DomainLayout.h m1d_VBRIndices.h m1d_BulkDomain1D.h \
        m1d_SimpleDiff_dom1D.h m1d_Domain1D.h \
        m1d_SurDomain1D.h m1d_SurfDomainTypes.h m1d_BulkDomainTypes.h \
        m1d_EqnVarTypes.h m1d_ProblemResidEval.h m1d_solvers.h m1d_EpetraJac.h \
        m1d_SolGlobalNonlinear.h m1d_SolNonlinear.h m1d_SimpleTDDiff_dom1D.h m1d_ProblemStatement.h \
        m1d_RecordTree_base.h m1d_BoundaryCondition.h m1d_defs.h m1d_Eqn_Names.h


BE_OBJS =  BEulerInt.o
BE_HDRS = BEulerInt.h

//NOBJS = m1d_nox_interface.o m1d_nox_problem.o

TOBJS = Multi1DDomain.o tddiff.o  $(M1D_OBJS) $(BE_OBJS) $(NOBJS)

# additional flags to be passed to the linker. If your program
# requires other external libraries, put them here

#############################################################################
# These links are to Cantera's install space
CANTERA_INCROOT =  @ct_incroot@
CANTERA_INSTALL_DIR = @ct_prefix@
CANTERA_APPS_INSTALL_DIR = @cta_prefix@
#
# Bring in the Cantera includes through the .mak file
#
include $(CANTERA_INCROOT)/cantera/Cantera.mak
#
###################################################################################################
#
# Trilinos installation options
#
TRILINOS_DIR=@trilinos_root@
TRILINOS_INC_DIR=$(TRILINOS_DIR)/include
TRILINOS_INC=-I$(TRILINOS_DIR)/include

include $(TRILINOS_INC_DIR)/Makefile.export.Amesos
include $(TRILINOS_INC_DIR)/Makefile.export.Ifpack

MPI_INCLUDE_DIR=@mpi_include_dir@

UTILSRC_DIR=../../util_src/src
UTILSRC_LIB=-L$(UTILSRC_DIR) -lutil_src
UTILSRC_DEP=$(UTILSRC_DIR)/libutil_src.a
#
########################################################################################################
#       TRILINOS LINK LINE
#              
#       (tpls are not broken down into paths and names. Therefore, we are hard-coding it here
#        until we develop a string substitution)
###################################################################################################3
#
AMESOS_LINE=$(Amesos_LIBRARY_DIRS) $(Amesos_LIBRARIES) $(Ifpack_LIBRARIES)

SUPERLUDIST_DIR=@superludist_library_dir@
SUPERLUDIST_LINE=-L$(SUPERLUDIST_DIR) @superludist_library@

UMFPACK_DIR=@umfpack_library_dir@
UMFPACK_LINE=-L$(UMFPACK_DIR) @umfpack_library@

PARMETIS_DIR=@parmetis_library_dir@
PARMETIS_LINE=-L$(PARMETIS_DIR) @parmetis_library@

LAPACK_DIR=@lapack_library_dir@
LAPACK_LINE=-L$(LAPACK_DIR)  @lapack_library@

BLAS_DIR=@blas_library_dir@
BLAS_LINE=-L$(BLAS_DIR) @blas_library@

Y12M_DIR=@y12m_library_dir@
Y12M_LINE=-L$(Y12M_DIR) @y12m_library@

TRILINOS_LIB_LINE=$(AMESOS_LINE)   $(SUPERLUDIST_LINE) $(UMFPACK_LINE) $(PARMETIS_LINE)  \
                  $(Y12M_LINE) $(LAPACK_LINE) $(BLAS_LINE) -lgfortran
#
###################################################################################################3
#


# Check to see whether we are in the msvc++ environment
os_is_win = @OS_IS_WIN@

# the C++ compiler
CXX = @MPICXX@ 

INSTALL_TSC = @abs_top_builddir@/bin/install_tsc

#
# The directory where Cantera include files may be found.
#

INCLUDE_DIRS = -I../.. -I$(CANTERA_INCROOT) \
	        $(TRILINOS_INC) \
               -I$(MPI_INCLUDE_DIR) \
               -I$(UTILSRC_DIR)

# C++ compile flags
LDEFINES =
#      Turn on additional debugging
# -DDEBUG_MODE
#      Turn on the initial calculation
# -DDEBUG_INIT_CALCULATION
CXX_FLAGS = @CXXFLAGS@ -Woverloaded-virtual $(INCLUDE_DIRS) -DUSE_VCSNONIDEAL $(LDEFINES)

# Ending C++ linking libraries
LCXX_END_LIBS = @LCXX_END_LIBS@
LMPICXX_END_LIBS = -lgfortran @LMPICXX_END_LIBS@

# flags passed to the C++ compiler/linker for the linking step
LCXX_FLAGS = @CXXFLAGS@

# How to compile C++ source files to object files
.cpp.o:
	$(CXX) $(CXX_FLAGS) -c $< 

# How to compile the dependency file
.cpp.d:
	@CXX_DEPENDS@  $(CXX_FLAGS) $*.cpp > $*.d

# List of dependency files to be created
DEPENDS=$(TOBJS:.o=.d)

# Program Name

all: libm1d.a  Multi1DDomain .depends tddiff

allsrc: libm1d.a  Multi1DDomain .depends tddiff

$(TOBJS) $(DEPENDS): Makefile

rebaseline:

libm1d.a: $(M1D_OBJS) $(BE_OBJS)
	ar ruv libm1d.a $(M1D_OBJS) $(BE_OBJS)
	touch libm1d.a


Multi1DDomain: Multi1DDomain.o $(M1D_OBJS)  $(NOBJS) $(CANTERA_CORE_LIBS_DEP) $(UTILSRC_DEP)
	$(CXX) -o Multi1DDomain Multi1DDomain.o $(M1D_OBJS)  \
                 $(APPL_BASE_LIB)  $(CANTERA_TOTAL_LIBS)  $(UTILSRC_LIB)   $(TRILINOS_LIB_LINE) $(LMPICXX_END_LIBS)

tddiff: tddiff.o $(M1D_OBJS) $(BE_OBJS) $(NOBJS) $(CANTERA_CORE_LIBS_DEP) $(UTILSRC_DEP)
	$(CXX) -o tddiff tddiff.o $(M1D_OBJS)  $(BE_OBJS)  \
                  $(CANTERA_TOTAL_LIBS) $(UTILSRC_LIB)  $(TRILINOS_LIB_LINE) $(LMPICXX_END_LIBS)


install:
	@ @INSTALL@ -d @cta_incdir@
	@ @INSTALL@ -d @cta_libdir@
	@ @INSTALL@ -d @cta_bindir@
	@$(INSTALL_TSC) libm1d.a  @cta_libdir@
	@(for lh in $(M1D_HDRS) $(BE_HDRS) ; do \
          $(INSTALL_TSC) "$${lh}" $(CANTERA_APPS_INSTALL_DIR)/include ; \
        done)
	@$(INSTALL_TSC)  tddiff @cta_bindir@
	@$(INSTALL_TSC) Multi1DDomain @cta_bindir@

# depends target -> forces recalculation of dependencies
depends:
	$(RM) *.d .depends
	@MAKE@ .depends

.depends: $(DEPENDS)
	cat *.d > .depends

# Do the test -> For the windows vc++ environment, we have to skip checking on
#                whether the program is uptodate, because we don't utilize make
#                in that environment to build programs.
test:
ifeq ($(os_is_win), 1)
else
	@MAKE@ $(PROGRAM)
endif
	./runtest

clean:
	$(RM) $(OBJS) *.o $(PROGRAM) $(DEPENDS) .depends Multi1DDomain libm1d.a tddiff
	(if test -d SunWS_cache ; then \
           $(RM) -rf SunWS_cache ; \
         fi )

dist_clean:
	@MAKE@ clean
	for fff in $(M1D_HDRS) $(BE_HDRS) ; do \
           $(RM) $(CANTERA_APPS_INSTALL_DIR)/include/$$fff ; \
	done
	$(RM) @cta_libdir@/libm1d.a
	$(RM) @cta_bindir@/tddiff
	$(RM) @cta_bindir@/Multi1DDomain


ifeq ($(wildcard .depends), .depends)
include .depends
endif


