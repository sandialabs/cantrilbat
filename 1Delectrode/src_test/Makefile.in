#!/bin/sh

############################################################################
#
#  Makefile to compile and link a C++ application to 
#  Cantera.
#
#############################################################################

# addition to suffixes
.SUFFIXES : .d

# the name of the executable program to be created
PROG_NAME = xmlSolnDiff

# the object files to be linked together. List those generated from Fortran
# and from C/C++ separately
OBJS = xmlSolnDiff.o tok_input_util.o SolnLayout.o SolnDomain.o

TOBJS = $(OBJS)

# additional flags to be passed to the linker. If your program
# requires other external libraries, put them here
LINK_OPTIONS = 

#############################################################################
# These links are to Cantera's install space
CANTERA_INCROOT =  @ct_incroot@
#
# Bring in the Cantera includes through the .mak file
#
include $(CANTERA_INCROOT)/cantera/Cantera.mak
#
# Check to see whether we are in the msvc++ environment
os_is_win = @OS_IS_WIN@


# the C++ compiler
CXX = @MPICXX@
#
# The directory where Cantera include files may be found.
#
INCLUDE_DIRS = -I$(CANTERA_INCROOT) 

# C++ compile flags
CXX_FLAGS = @CXXFLAGS@ $(INCLUDE_DIRS)

# Ending C++ linking libraries
LCXX_END_LIBS = @LCXX_END_LIBS@

# flags passed to the C++ compiler/linker for the linking step
LCXX_FLAGS = @CXXFLAGS@

# How to compile C++ source files to object files
.cpp.o:
	$(CXX) $(CXX_FLAGS) -c $< 

# How to compile the dependency file
.cpp.d:
	@CXX_DEPENDS@  $(CXX_FLAGS) $*.cpp > $*.d

# List of dependency files to be created
DEPENDS=$(TOBJS:.o=.d)

# Program Name
PROGRAM = $(PROG_NAME)$(EXE_EXT)

# Installed Program
PROGRAM_REMOTE = @cta_bindir@/$(PROGRAM)

all: $(PROGRAM) m1d_extractLastSoln .depends 

rebaseline:

$(PROGRAM): $(OBJS) $(CANTERA_CORE_LIBS_DEP)
	$(CXX) -o $(PROGRAM) $(OBJS) $(LCXX_FLAGS) $(LINK_OPTIONS) \
                  $(CANTERA_TOTAL_LIBS) $(AMESOS_LIBS) $(IFPACK_LIBS) $(LCXX_END_LIBS)

m1d_extractLastSoln: m1d_extractLastSoln.o tok_input_util.o SolnLayout.o SolnDomain.o $(CANTERA_CORE_LIBS_DEP)
	$(CXX) -o m1d_extractLastSoln m1d_extractLastSoln.o tok_input_util.o SolnLayout.o SolnDomain.o $(LCXX_FLAGS) $(LINK_OPTIONS) \
                  $(CANTERA_TOTAL_LIBS) $(AMESOS_LIBS) $(IFPACK_LIBS) $(LCXX_END_LIBS)

$(PROGRAM_REMOTE): $(PROGRAM)
	@INSTALL@ -c $(PROGRAM) @cta_bindir@

# depends target -> forces recalculation of dependencies
depends:
	$(RM) *.d .depends
	$(MAKE) .depends

.depends: $(DEPENDS)
	cat *.d > .depends

$(DEPENDS):  Makefile

$(OBJS):  Makefile


# Do the test -> For the windows vc++ environment, we have to skip checking on
#                whether the program is uptodate, because we don't utilize make
#                in that environment to build programs.
test:
	$(MAKE) $(PROGRAM)
	./runtest

clean:
	$(RM) $(OBJS) *.o $(PROGRAM) $(DEPENDS) .depends Multi1DDomain
	(if test -d SunWS_cache ; then \
           $(RM) -rf SunWS_cache ; \
         fi )

install:
	@INSTALL@ -d  @cta_bindir@
	@INSTALL@ -c $(PROGRAM) @cta_bindir@
	@INSTALL@ -c m1d_extractLastSoln   @cta_bindir@

ifeq ($(wildcard .depends), .depends)
include .depends
endif

