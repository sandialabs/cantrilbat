#ifndef _M1D_NOX_PROBLEM_H
#define _M1D_NOX_PROBLEM_H

#include "Teuchos_RCP.hpp"

// Forward Declarations
class Epetra_Comm;
class Epetra_Map;
class Epetra_Vector;
class Epetra_Import;
class Epetra_CrsGraph;
class Epetra_CrsMatrix;

// Flag to tell the evaluate routine what objects to fill
enum FillType
{
  F_ONLY, MATRIX_ONLY, ALL
};

// Finite Element Problem Class
class FiniteElementProblem
{

public:

  // Constructor
  FiniteElementProblem(int NumGlobalElements, Epetra_Comm& Comm);

  // Destructor
  ~FiniteElementProblem();

  // Evaluates the function (F) and/or the Jacobian using the solution 
  // values in solnVector.
  bool
  evaluate(FillType f,
           const Epetra_Vector *solnVector,
           Epetra_Vector *rhsVector,
           Epetra_RowMatrix *matrix);

  // Return a reference to the Epetra_Vector with the initial guess
  // that is generated by the FiniteElementProblem class.
  Teuchos::RCP<Epetra_Vector>
  getSolution();

  // Return a reference to the Epetra_Vector with the Jacobian
  // that is generated by the FiniteElementProblem class.
  Teuchos::RCP<Epetra_CrsMatrix>
  getJacobian();

private:

  // inserts the global column indices into the Graph
  Epetra_CrsGraph&
  generateGraph(Epetra_CrsGraph& AA);

private:

  FillType flag;
  Epetra_Map *StandardMap;
  Epetra_Map *OverlapMap;
  Epetra_Import *Importer;
  Teuchos::RCP<Epetra_Vector> initialSolution;
  Epetra_Vector *rhs;
  Epetra_CrsGraph *AA;
  Teuchos::RCP<Epetra_CrsMatrix> A;
  Epetra_Comm *Comm;

  int MyPID; // Process number
  int NumProc; // Total number of processes
  int NumMyElements; // Number of elements owned by this process
  int NumGlobalElements; // Total Number of elements

};
#endif

