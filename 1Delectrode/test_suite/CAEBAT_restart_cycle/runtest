#!/bin/sh
#
#
#
function cleanup {
  if test -e runInProgress.txt
  then
    /bin/rm -f runInProgress.txt
    echo "  Run Interrupted: " `date` > runBad
    /bin/rm -f runGood
  fi
  exit 0
}
fff='0'
while getopts "fh" opt; do
  case $opt in
    f  ) fff='1' ;;
    h  ) echo 'usage runtest [-f] [-h]'
        exit 1 ;;
    \? ) echo 'usage runtest [-f] [-h]'
        exit 1 ;;
  esac
done
shift $(($OPTIND - 1))
#
#  Check the file flag to see if a run is in progress
#
if test -f runInProgress.txt
then
  if test $fff == '0'
  then
    echo 'Runner ' $$ ': Test skipped due to runInProgress.txt flag: ' `pwd`
    echo '               Remove the flag file if you want to run the test'
    exit 0
  fi
fi
echo $$ > runInProgress.txt
#
#  trap interrupt and signals. 
#
trap cleanup INT TERM TSTP QUIT

temp_success="1"
/bin/rm  -f  out.txt outa.txt err_out.txt diff_xml.txt  diff_out.txt runGood runBad \
             solution.xml diff_b0.txt diff_b2.txt diff_b2.txt diff_s0.txt diff_s3.txt diff_IV.txt 
/bin/rm -f             accumulatedHeatSource1.txt    accumulatedHeatSource2.txt    accumulatedHeatSource3.txt   \
             solutionStartEnd1.xml   solutionStartEnd2.xml   solutionStartEnd3.xml \
             SurDomain1D_1.dat  SurDomain1D_2.dat  SurDomain1D_3.dat  SurDomain1D_0.dat \
             BulkDomain1D_0.dat BulkDomain1D_1.dat BulkDomain1D_2.dat timeDep_IV.dat  transport_log.xml
/bin/rm -rf workdir1/* workdir2/* workdir3/*

#
# Create a symbolic link to mpequil, if none exists already
#
if test ! -x LiIon_PorousBat   ; then
  if test -x ../../src_LiIon_PorousBat/LiIon_PorousBat ; then
    ln -s ../../src_LiIon_PorousBat/LiIon_PorousBat .
  else
    echo 'ERROR: Multi1DDomain executable can not be found'
    exit -1
  fi
fi
#
###########################################################################
#
# Specify the MPI environment
#
MP_MACHINEFILE=${MP_MACHINEFILE:=/ascldap/users/hkmoffa/arch/linux/lib/machinefile_ceerws0603}
#
###########################################################################
#
XMLSOLNDIFF=${XMLSOLNDIFF:=../../src_test/xmlSolnDiff}
#
#################################################################
#
# Execute the command
#

runAll.sh

retnState=$?
if test $retnState != "0" 
then
  temp_success="0"
  echo "runAll.sh returned with bad status, $retnState, check output"
  exit 0
fi

$XMLSOLNDIFF -a 1.0E-13 solutionStartEnd1_blessed.xml solutionStartEnd1.xml > diff_xml1.txt
retnState_xml1=$?

$XMLSOLNDIFF -a 1.0E-13 solutionStartEnd2_blessed.xml solutionStartEnd2.xml > diff_xml2.txt
retnState_xml2=$?

$XMLSOLNDIFF -a 1.0E-13 solutionStartEnd3_blessed.xml solutionStartEnd3.xml > diff_xml3.txt
retnState_xml3=$?

retnState_xml=$retnState_xml1

if test $retnState_xml = "0"
then
    if test "$retnState_xml2" != "0"
    then
       retnState_xml=$retnState_xml2
    else
       if test "$retnState_xml3" != "0"
       then
         retnState_xml=$retnState_xml3
       fi
    fi
fi
#echo 'retnState_xml = ' $retnState_xml

diff accumulatedHeatSource1_blessed.txt accumulatedHeatSource1.txt > diff_a1.txt
retnState_a1=$?

diff accumulatedHeatSource2_blessed.txt accumulatedHeatSource2.txt > diff_a2.txt
retnState_a2=$?

diff accumulatedHeatSource3_blessed.txt accumulatedHeatSource3.txt > diff_a3.txt
retnState_a3=$?

retnState_a="1"
if test $retnState_a1 = "0" -a $retnState_a2 = "0" -a $retnState_a3 = "0" 
then
   retnState_a="0"
fi
#echo 'retnState_a = ' $retnState_a



if test $retnState_xml = "0" -a $retnState_a = "0"
then
  echo "Successful test comparison on "`pwd`
  echo "  Test Passed: " `date` > runGood
else
  echo "UnSuccessful test comparison on "`pwd`
  echo "  Test failed: " `date` > runBad
fi

#
# return 0 for no errors, 1 for errors which break the test suite
#
#
/bin/rm -f runInProgress.txt
exit 0

