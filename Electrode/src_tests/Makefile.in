#!/bin/sh

############################################################################
#
#  Makefile to compile and link a C++ application to 
#  Cantera.
#
#############################################################################

# addition to suffixes
.SUFFIXES : .d

# the name of the executable program to be created
PROGRAM = xmlElectrodeDiff

# the object files to be linked together. List those generated from Fortran
# and from C/C++ separately
OBJS = xmlElectrodeDiff.o 

TOBJS = $(OBJS)

# additional flags to be passed to the linker. If your program
# requires other external libraries, put them here
LINK_OPTIONS = 

#############################################################################
# These links are to Cantera's install space
CANTERA_INCROOT =  @ct_incroot@
#
# Bring in the Cantera includes through the .mak file
#
include $(CANTERA_INCROOT)/cantera/Cantera.mak
#
# Check to see whether we are in the msvc++ environment
os_is_win = @OS_IS_WIN@
#
# Utility source dir
#
UTILSRC_DIR=../../util_src/src
UTILSRC_LIB=-L$(UTILSRC_DIR) -lutil_src
UTILSRC_DEP=$(UTILSRC_DIR)/libutil_src.a
#
# Set up the Cantera addition library
#
CTPADDS_DIR = ../../ctpadds/src
CTPADDS_DEP = $(CTPADDS_DIR)/libctpadds.a
CTPADDS_LIB = -L$(CTPADDS_DIR) -lctpadds
#

#
# Electrode src directory
#
ELECTRODE_DIR= ../src
ELECTRODE_INC= -I$(ELECTRODE_DIR)
ELECTRODE_DEP= $(ELECTRODE_DIR)/libElectrode.a 
ELECTRODE_LIB= -L$(ELECTRODE_DIR) -lElectrode 
#
# the C++ compiler
CXX = @MPICXX@
#
# The directory where  include files may be found.
#
INCLUDE_DIRS = $(ELECTRODE_INC) -I$(UTILSRC_DIR) -I$(CANTERA_INCROOT) 

# C++ compile flags
CXX_FLAGS = @CXXFLAGS@ $(INCLUDE_DIRS)

# Ending C++ linking libraries
LCXX_END_LIBS = @LCXX_END_LIBS@

# flags passed to the C++ compiler/linker for the linking step
LCXX_FLAGS = @CXXFLAGS@

all: $(PROGRAM) .depends

# How to compile C++ source files to object files
.cpp.o:
	$(CXX) $(CXX_FLAGS) -c $< 

# How to compile the dependency file
.cpp.d:
	@CXX_DEPENDS@ $(CXX_FLAGS) $*.cpp > $*.d

# List of dependency files to be created
DEPENDS=$(TOBJS:.o=.d)

$(TOBJS): Makefile

$(DEPENDS): Makefile


rebaseline:

$(PROGRAM): $(TOBJS) $(ELECTRODE_DEP) $(CANTERA_CORE_LIBS_DEP) $(UTILSRC_DEP) \
              $(CTPADDS_DEP)
	$(CXX) -o $(PROGRAM) $(TOBJS) $(LCXX_FLAGS) $(LINK_OPTIONS) \
                  $(ELECTRODE_LIB) $(UTILSRC_LIB) $(CTPADDS_LIB) \
                  $(CANTERA_TOTAL_LIBS) $(LCXX_END_LIBS)

# depends target -> forces recalculation of dependencies
depends:
	$(RM) *.d .depends
	@MAKE@ .depends

.depends: $(DEPENDS)
	cat *.d > .depends

# Do the test -> For the windows vc++ environment, we have to skip checking on
#                whether the program is uptodate, because we don't utilize make
#                in that environment to build programs.
test:
ifeq ($(os_is_win), 1)
else
	@MAKE@ $(PROGRAM)
endif

clean:
	$(RM) $(OBJS) *.o $(PROGRAM) $(DEPENDS) .depends 

install:
	@INSTALL@ -c $(PROGRAM) @cta_bindir@

ifeq ($(wildcard .depends), .depends)
include .depends
endif

