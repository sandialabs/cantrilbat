#
# Copywrite 2004 Sandia Corporation. Under the terms of Contract
# DE-AC04-94AL85000, there is a non-exclusive license for use of this
# work by or on behalf of the U.S. Government. Export of this program
# may require a license from the United States Government.
#

.SUFFIXES: .d

##########################################################################
#           Setup The Zuzax Directory locations
#########################################################################

PURIFY=@PURIFY@

PROGRAM = anode_5_intSurf
TEST_NAME = LiSi_Anode_5_Integrate
PROGRAM_ORIGIN=$(PROGRAM)

TEST_FLAGS = runGood runBad runInProgress.txt

TEST_INTERMEDIATES = diff_out.txt err_out.txt

TEST_RESULTS = out.txt

# These links are to Cantera's install space
CT_INCROOT =  @ct_incroot@

#
# Bring in the Zuzax includes through the .mak file
#
include $(CT_INCROOT)/zuzax/Zuzax.mak

TOPDIR = @abs_top_builddir@

UTILSRC_DIR = ../../../util_src/src
UTILSRC_DEP = $(UTILSRC_DIR)/libutil_src.a
UTILSRC     = -L$(UTILSRC_DIR) -lutil_src
#
# Set up the Zuzax addition library
#
CTPADDS_DIR = ../../../ctpadds/src
CTPADDS_DEP = $(CTPADDS_DIR)/libctpadds.a
CTPADDS_LIB = -L$(CTPADDS_DIR) -lctpadds
#
# Set up the Zuzax Application Base directory
#
CTAPPLBASE_DIR = ../../src
CTAPPLBASE_DEP =   $(CTAPPLBASE_DIR)/libElectrode.a
CTAPPLBASE_LIB = -L$(CTAPPLBASE_DIR) -lElectrode
#
#########################################################################
# Set up the various local and global defines
########################################################################
LDEFINES = -DDEBUG 
GDEFINES =
#
# Set up the global include directory macro
#
INCLUDE_DIRS = $(ZUZAX_TOTAL_INCLUDES) -I$(CTAPPLBASE_DIR) -I$(UTILSRC_DIR)  -I$(CTPADDS_DIR) 

all: .depends anode_5_intSurf

LDR = $(F77LDR)
LDRFLAGS = $(F77LDRFLAGS)
LDRFLAGS_DEBUG = -g -y $(FFLAGS_BSD)

CCFLAGS =   $(LDEFINES) $(INCLUDE_DIRS) $(GDEFINES)


OBJ_ANODE = anode_5_intSurf.o

OBJ_ZUZAX_ADDONS =  

############################################################################
# section to set up compiler rules
###########################################################################
#
# the C++ compiler
#
CXX = @CXX@
CXXFLAGS = @CXXFLAGS@
LCXX_FLAGS = @LCXX_FLAGS@
LCXX_END_LIBS = @LCXX_END_LIBS@
CXXLDR = $(CXX)
#
# C compiler
#
CC = @CC@
CFLAGS = @CXXFLAGS@
#
# Both the C and C++ compiler predefines
#
CCFLAGS =  $(GDEFINES) $(INCLUDE_DIRS) $(LDEFINES) 
#
.c.o:
	$(PURIFY) $(CC) $(CFLAGS) $(CCFLAGS) -c $<
.cpp.o:
	$(PURIFY) $(CXX) $(CXXFLAGS) $(CCFLAGS) -c $<

.f:
	$(F77) $(FFLAGS) -c $<
	$(F77LDR) $(F77LDRFLAGS) $*.o -o $@


############################################################################
# section to set up depends
###########################################################################
DEPENDS = $(OBJ_ANODE:.o=.d) 

.f.d:
	echo "$*.o: $*.f" > $*.d

.cpp.d:
	@CXX_DEPENDS@ $(CXXFLAGS) $(CCFLAGS) -c $*.cpp > $*.d

.c.d:
	@CXX_DEPENDS@ $(CXXFLAGS) $(CCFLAGS) -c $*.c > $*.d

depends:
	$(RM) $(DEPENDS)
	$(MAKE) .depends

.depends: $(DEPENDS)
	cat *.d > .depends

test:
	@ $(MAKE) -s all
	@echo -n 'Checking need to run test $(TEST_NAME): '
	@ $(MAKE) -q -s  runGood ; ss=$$? ; if test $$ss = "0" ; then echo '   NOT NEEDED' ; else  $(MAKE) -s  runGood ; fi

runGood: $(PROGRAM_ORIGIN) $(DATA) Makefile $(BLESSED_FILES)
	@echo 'RUNNING TEST ' $(TEST_NAME)
	( $(TOPDIR)/bin/runtest_Exec )


rebaseline:
	cp out.txt good_out.txt

##############################################################################

$(OBJ_MPEQUIL): Makefile
$(DEPENDS): Makefile

anode_5_intSurf: $(OBJ_ANODE) $(OBJ_ZUZAX_ADDONS) $(UTILSRC_DEP) \
               $(ZUZAX_CORE_LIBS_DEP) $(CTPADDS_DEP) $(CTAPPLBASE_DEP)
	$(PURIFY) $(CXXLDR) $(LCXX_FLAGS) -o anode_5_intSurf $(OBJ_ANODE) \
	          $(OBJ_ZUZAX_ADDONS)  \
                  $(CTAPPLBASE_LIB) $(CTPADDS_LIB) $(UTILSRC) $(ZUZAX_TOTAL_LIBS) \
                  $(LCXX_END_LIBS) 

install:

clean:
	$(RM) *.o  .depends *.d *~
	$(RM) ${PROG} anode_intSurf

clean_dist:
	$(MAKE) clean
	$(MAKE) clean_test

clean_test:
	$(RM) $(TEST_RESULTS) $(TEST_INTERMEDIATES) $(TEST_FLAGS)

clean_test_flags:
	$(RM) $(TEST_FLAGS)

ifeq ($(wildcard .depends), .depends)
include .depends
endif
