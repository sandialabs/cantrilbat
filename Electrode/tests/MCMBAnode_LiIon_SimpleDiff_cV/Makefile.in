#!/bin/sh
#
# Copywrite 2004 Sandia Corporation. Under the terms of Contract
# DE-AC04-94AL85000, there is a non-exclusive license for use of this
# work by or on behalf of the U.S. Government. Export of this program
# may require a license from the United States Government.

.SUFFIXES: .d

PROGRAM =  MCMBAnode_SimpleDiff
TESTNAME = MCMBAnode_LiIon_SimpleDiff_cV

BLESSED_FILES = good_out.txt soln_0_0_blessed.xml \
              MCMB_globalResults_blessed_0_0.csv  MCMB_intResults_blessed_0_0.csv

DATA = anode.inp problem_setup.sh \
       ECsoln_ion.xml  Li_Metal.xml  MCMBAnode_electrode.xml  MCMB_RedlichKister.xml  metal_Li_LiIon_electrons.xml

all: .dependsT $(PROGRAM) output_test_blessed.txt

################################################################################################################
#                          Setup The Cantera Directory locations
################################################################################################################

TOPDIR = @abs_top_srcdir@
PURIFY= @PURIFY@

# These links are to Cantera's install space
CT_INCROOT = @ct_incroot@

# Bring in the Cantera includes through the .mak file
include $(CT_INCROOT)/cantera/Cantera.mak
#
#  Flag to indicate whether Zuzax was compiled with DEBUG_MODE enabled
#
DEBUG_MODE_ENABLED = @Zuzax_Debug_Mode_Enabled@


# Setup the util_src library for inclusion in this project
UTILSRC_DIR = ../../../util_src/src
UTILSRC_DEP = $(UTILSRC_DIR)/libutil_src.a
UTILSRC     = -L$(UTILSRC_DIR) -lutil_src

# Set up the Cantera addition library
CTPADDS_DIR = ../../../ctpadds/src
CTPADDS_DEP = $(CTPADDS_DIR)/libctpadds.a
CTPADDS_LIB = -L$(CTPADDS_DIR) -lctpadds

# Set up the Cantera Application Base directory
CTAPPLBASE_DIR = ../../src
CTAPPLBASE_DEP =   $(CTAPPLBASE_DIR)/libElectrode.a
CTAPPLBASE_LIB = -L$(CTAPPLBASE_DIR) -lElectrode

# Set up the Library Dep list. This will be used for .d file and program dependencies
LIBRARY_DEP_LIST = $(UTILSRC_DEP) $(CANTERA_CORE_LIBS_DEP) $(CTPADDS_DEP) $(CTAPPLBASE_DEP)

###################################################################################################################
#                    Set up the various local and global defines
##################################################################################################################

LDEFINES = -DDEBUG 
GDEFINES =

# Set up the global include directory macro
INCLUDE_DIRS = $(CANTERA_TOTAL_INCLUDES) -I$(CTAPPLBASE_DIR) -I$(UTILSRC_DIR)  -I$(CTPADDS_DIR) 

##################################################################################################################
#                          SECTION TO SET UP COMPILER RULES 
##################################################################################################################

# the C++ compiler
CXX = @CXX@
CCFLAGS =  $(LDEFINES) $(INCLUDE_DIRS) $(GDEFINES)
CXXFLAGS = @CXXFLAGS@

# C compiler
CC = @CC@
CFLAGS = @CXXFLAGS@

# Both the C and C++ compiler predefines
CCFLAGS = $(GDEFINES) $(INCLUDE_DIRS) $(LDEFINES) 

.cpp.o:
	$(PURIFY) $(CXX) $(CXXFLAGS) $(CCFLAGS) -c $<

##################################################################################################################
#                        Section to Set Up Linking Rules
##################################################################################################################

CXXLDR = $(CXX)
LCXX_FLAGS = @LCXX_FLAGS@
LCXX_END_LIBS = @LCXX_END_LIBS@

OBJ = $(PROGRAM).o
$(OBJ): Makefile

$(PROGRAM): $(OBJ) $(UTILSRC_DEP) $(LIBRARY_DEP_LIST) 
	$(PURIFY) $(CXXLDR) $(LCXX_FLAGS) -o $(PROGRAM) $(OBJ) \
                  $(CTAPPLBASE_LIB) $(CTPADDS_LIB) $(UTILSRC) $(CANTERA_TOTAL_LIBS) \
                  $(LCXX_END_LIBS) 

#######################################################################################################################
#                          SECTION TO SET UP DEPENDS RULES
#######################################################################################################################

.cpp.d:
	@CXX_DEPENDS@ $(CXXFLAGS) $(CCFLAGS) -c $*.cpp > $*.d

DEPENDS = $(OBJ:.o=.d) 

# Set up the dependency list for .d files:
$(DEPENDS): Makefile  $(PROGRAM).cpp

depends:
	$(RM) $(DEPENDS)
	$(MAKE) -s  .depends

.dependsT: $(DEPENDS)
	cat $(DEPENDS) > .depends
	touch .dependsT


ifeq ($(wildcard .depends), .depends)
include .depends
endif

########################################################################################################################
#                        SECTION TO SET UP TEST RUNS
########################################################################################################################

test:  output_test_blessed.txt
	@$(MAKE) -s all
	@echo -n 'Checking need to run test ' $(TESTNAME) ': '
	@$(MAKE) -q -s  runGood ; ss=$$? ; if test $$ss = "0" ; then echo '   NOT NEEDED' ; else  $(MAKE) -s runGood ; fi

output_test_blessed.txt: good_out.txt good_out_noDbg.txt Makefile
	@ if test $(DEBUG_MODE_ENABLED) -eq 1 ; then \
           cp good_out.txt output_test_blessed.txt ; \
        else \
           cp good_out_noDbg.txt output_test_blessed.txt ; \
        fi

runGood: $(PROGRAM) $(DATA) Makefile $(BLESSED_FILES)
	@echo 'RUNNING TEST ' $(TESTNAME)
	../runtest_Electrode

rebaseline:
	cp out.txt                   good_out.txt
	cp soln_0_0.xml              soln_0_0_blessed.xml
	cp MCMB_globalResults_0_0.csv MCMB_globalResults_blessed_0_0.csv
	cp MCMB_intResults_0_0.csv MCMB_intResults_blessed_0_0.csv
	@ if test $(DEBUG_MODE_ENABLED) -eq 1 ; then \
           cp out.txt good_out.txt  ; \
        else \
           cp out.txt good_out_noDbg.txt ; \
        fi

##########################################################################################################################
#          SECTION TO SET UP CLEAN RULES
##########################################################################################################################

test_clean:
	$(RM) runInProgress.txt runBad runGood \
	      diff_out.txt diff_csv.txt err_out.txt soln_0_0.xml out.txt \
	      MCMB_globalResults_0_0.csv   MCMB_intResults_0_0.csv

clean:
	$(RM) runInProgress.txt runBad runGood 
	$(RM) *.o  .depends .dependsT *.d *~  $(PROGRAM) 

dist_clean:
	$(MAKE) -s test_clean
	$(MAKE) -s clean

##########################################################################################################################

