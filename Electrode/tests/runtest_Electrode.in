#!/bin/sh
#
#      Electrode Test Harness Runner
#
#################################################################################################################
#
function cleanup {
  if test -e runInProgress.txt
  then
    /bin/rm -f runInProgress.txt
    echo "  Run Interrupted: " `date` > runBad
    /bin/rm -f runGood
  fi
  exit 0
}
#
DIFF_REQUIRED="True"
#
################################################################################################################################
#  chop_head: Remove the 1st element of a string
#
chop_head() {
    shift
    echo "$@"
}
#
################################################################################################################################
# first_el: Echo the 1st element of a string
#
first_el() {
    echo "$1"
}
#
################################################################################################################################
#
#   Compare two ascii files using the generic diff command
#
#   arg 1 = blessed file
#   arg 2 = other file to be compared
#
diff_compare_file() {

   bb=$1
   gg=$2

   difname=''
   filename=''
   diff_comparison_file="diff_summary.txt"

   if test $# -ge 3
   then
      difname=$3
   else
      filename="${gg%.*}"
      difname=diff_"$filename".txt
   fi
   diffCode='0'

   diff $bb $gg >> $difname
   retnStat=$?
   if test $retnStat = "0"
   then
        echo "     * PASSED: diff comparison ($bb vs. $gg)"
        echo "     * PASSED: diff comparison ($bb vs. $gg)" >> $diff_comparison_file
    else
        echo "     * FAILED: diff comparison ($bb vs. $gg)"
        echo "     * FAILED: diff comparison ($bb vs. $gg)" >> $diff_comparison_file
        diffCode='FAILED'
        if test $DIFF_REQUIRED = "True"
        then
          echo "  Bad dataFile: " `date` > runBad
          /bin/rm -f runGood
          retnStat_cum=$retnStat
        else
            echo "     *       : However not required for test success"
            echo "     *       : However not required for test success" >> $diff_comparison_file
            retnStat="0"
        fi
    fi
    unset bb
    unset gg
    unset difname
    unset filename

    return $retnStat
}
#
###############################################################################################################
#








fff='0'
while getopts "fh" opt; do
  case $opt in
    f  ) fff='1' ;;
    h  ) echo 'usage runtest [-f] [-h]'
        exit 1 ;;
    \? ) echo 'usage runtest [-f] [-h]'
        exit 1 ;;
  esac
done
shift $(($OPTIND - 1))
#
#  Check the file flag to see if a run is in progress
#
if test -f runInProgress.txt
then
  if test $fff == '0'
  then
    echo 'Runner ' $$ ': Test skipped due to runInProgress.txt flag: ' `pwd`
    echo '               Remove the flag file if you want to run the test'
    exit 0
  fi
fi
echo $$ > runInProgress.txt
#
#  trap interrupt and signals. 
#
trap cleanup INT TERM TSTP QUIT
#
temp_success="1"
/bin/rm  -f  out.txt err_out.txt  FeS2_intResults_0_0.csv \
             diff_csv.txt  diff_out.txt vcs_equilibrate_res.csv runGood runBad
#
# Create a symbolic link to electrodeCell, if none exists already
#

PROG_EXE=./FeS2_4_MPNewman_cc
if test ! -x ${PROG_EXE}  ; then
  echo 'ERROR: ' ${PROG_EXE} ' executable can not be found'
  exit -1
fi
eCode=0

#################################################################
#
#################################################################

ELECTRODE_TURN_OFF_PC_PRINTING=true
export ELECTRODE_TURN_OFF_PC_PRINTING

$PROG_EXE   > out.txt 2>err_out.txt
retnStat=$?
if test $retnStat != "0" 
then
  temp_success="0"
  echo "$PROG_EXE returned with bad status, $retnStat, check output"
fi


diff good_out.txt out.txt > diff_out.txt
retnStat_txt=$?

csvdiff  FeS2_intResults_blessed.csv FeS2_intResults_0_0.csv > diff_csv.txt
retnStat_csv=$?

if test $retnStat_csv = "0"
then
  echo "Successful test comparison on "`pwd`
  if test $retnStat_txt != "0"
  then
     echo "      But, text output files have differences. See diff_out.txt"
     echo " Bad Text: " `date` > runBad
  else
     echo "  Test Passed: " `date` > runGood
  fi
else
  echo "Unsuccessful test comparison on "`pwd` " test"
  echo "  Bad DataFile: " `date` > runBad
  if test $retnStat_txt != "0"
  then
     echo "      And, text output files have differences. See diff_out.txt"
  fi
fi

#
# return 0 for no errors, 1 for errors
#
/bin/rm -f runInProgress.txt
exit $eCode

